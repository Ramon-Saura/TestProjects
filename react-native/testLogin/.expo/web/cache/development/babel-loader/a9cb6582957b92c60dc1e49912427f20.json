{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport EventEmitter from 'events';\nimport dispatcher from \"../../dispatcher\";\nimport actionTypes from \"../actions/action-types\";\nvar CHANGE_EVENT = 'change';\nvar _users = [];\n\nvar LoginStore = function (_EventEmitter) {\n  _inherits(LoginStore, _EventEmitter);\n\n  var _super = _createSuper(LoginStore);\n\n  function LoginStore() {\n    _classCallCheck(this, LoginStore);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LoginStore, [{\n    key: \"addChangeListener\",\n    value: function addChangeListener(callback) {\n      this.on(CHANGE_EVENT, callback);\n    }\n  }, {\n    key: \"removeChangeListener\",\n    value: function removeChangeListener(callback) {\n      this.removeListener(CHANGE_EVENT, callback);\n    }\n  }, {\n    key: \"emitChange\",\n    value: function emitChange() {\n      this.emit(CHANGE_EVENT);\n    }\n  }, {\n    key: \"getUsersList\",\n    value: function getUsersList() {\n      return _users;\n    }\n  }]);\n\n  return LoginStore;\n}(EventEmitter);\n\nvar loginStore = new LoginStore();\ndispatcher.register(function (action) {\n  switch (action.type) {\n    case actionTypes.USERS_LIST:\n      console.log('store' + action.data);\n      _users = action.data;\n      loginStore.emitChange();\n      break;\n  }\n});\nexport default loginStore;","map":{"version":3,"sources":["C:/Users/ramon/Desktop/testProjects/react-native/testLogin/src/store/login-store.js"],"names":["EventEmitter","dispatcher","actionTypes","CHANGE_EVENT","_users","LoginStore","callback","on","removeListener","emit","loginStore","register","action","type","USERS_LIST","console","log","data","emitChange"],"mappings":";;;;;;;;;;AAAA,OAAOA,YAAP,MAAyB,QAAzB;AACA,OAAOC,UAAP;AACA,OAAOC,WAAP;AAEA,IAAMC,YAAY,GAAG,QAArB;AAEA,IAAIC,MAAM,GAAG,EAAb;;IAEMC,U;;;;;;;;;;;;;WACF,2BAAkBC,QAAlB,EAA2B;AACvB,WAAKC,EAAL,CAAQJ,YAAR,EAAsBG,QAAtB;AACH;;;WACD,8BAAqBA,QAArB,EAA8B;AAC1B,WAAKE,cAAL,CAAoBL,YAApB,EAAkCG,QAAlC;AACH;;;WACD,sBAAY;AACR,WAAKG,IAAL,CAAUN,YAAV;AACH;;;WACD,wBAAc;AACV,aAAOC,MAAP;AACH;;;;EAZoBJ,Y;;AAezB,IAAMU,UAAU,GAAG,IAAIL,UAAJ,EAAnB;AACAJ,UAAU,CAACU,QAAX,CAAoB,UAACC,MAAD,EAAU;AAC1B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKX,WAAW,CAACY,UAAjB;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAASJ,MAAM,CAACK,IAA5B;AACAb,MAAAA,MAAM,GAAGQ,MAAM,CAACK,IAAhB;AACAP,MAAAA,UAAU,CAACQ,UAAX;AACJ;AALJ;AAOH,CARD;AAUA,eAAeR,UAAf","sourcesContent":["import EventEmitter from 'events'\r\nimport dispatcher from '../../dispatcher'\r\nimport actionTypes from '../actions/action-types'\r\n\r\nconst CHANGE_EVENT = 'change'\r\n\r\nlet _users = []\r\n\r\nclass LoginStore extends EventEmitter{\r\n    addChangeListener(callback){\r\n        this.on(CHANGE_EVENT, callback)\r\n    }\r\n    removeChangeListener(callback){\r\n        this.removeListener(CHANGE_EVENT, callback)\r\n    }\r\n    emitChange(){\r\n        this.emit(CHANGE_EVENT)\r\n    }\r\n    getUsersList(){\r\n        return _users\r\n    }\r\n}\r\n\r\nconst loginStore = new LoginStore()\r\ndispatcher.register((action)=>{\r\n    switch(action.type){\r\n        case actionTypes.USERS_LIST:\r\n            console.log('store'+ action.data)\r\n            _users = action.data\r\n            loginStore.emitChange()\r\n        break\r\n    }\r\n})\r\n\r\nexport default loginStore"]},"metadata":{},"sourceType":"module"}